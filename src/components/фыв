import React, { useEffect, useState } from 'react'
import {
    getTeachers,
    createTeacher,
    getSubjects,
    getSchools,
    deleteTeacher,
    updateTeacher,
} from '../services/api'
import {
    Table,
    TableBody,
    TableCell,
    TableContainer,
    TableHead,
    TableRow,
    Paper,
    Typography,
    Button,
    TextField,
    Box,
    MenuItem,
    Select,
    InputLabel,
    FormControl,
    Dialog,
    DialogActions,
    DialogContent,
    DialogTitle,
    List,
    ListItem,
    ListItemText,
    Checkbox,
    TableSortLabel,
} from '@mui/material'
import PaginationComponent from './PaginationComponent'

const TeacherTable = () => {
    const [teachers, setTeachers] = useState([])
    const [subjects, setSubjects] = useState([])
    const [schools, setSchools] = useState([])
    const [showCreateTeacherForm, setShowCreateTeacherForm] = useState(false)
    const [showEditTeacherForm, setShowEditTeacherForm] = useState(false)
    const [showSubjectDialog, setShowSubjectDialog] = useState(false)
    const [selectedSubjects, setSelectedSubjects] = useState([])
    const [newTeacher, setNewTeacher] = useState({
        first_name: '',
        last_name: '',
        middle_name: '',
        subjects: [],
        schoolId: '',
    })
    const [editTeacher, setEditTeacher] = useState({
        id: '',
        first_name: '',
        last_name: '',
        middle_name: '',
        subjects: [],
        schoolId: '',
    })

    const [sortColumn, setSortColumn] = useState('id')
    const [sortDirection, setSortDirection] = useState('asc')

    const [total, setTotal] = useState(0)
    const [page, setPage] = useState(1)
    const [limit] = useState(10)
    const [confirmOpen, setConfirmOpen] = useState(false)
    const [selectedTeacherId, setSelectedTeacherId] = useState(null)

    useEffect(() => {
        loadTeachers(page, limit, sortColumn, sortDirection)
        getSubjects().then((response) =>
            setSubjects(
                Array.isArray(response.data.subjects)
                    ? response.data.subjects
                    : []
            )
        )
        getSchools().then((response) =>
            setSchools(
                Array.isArray(response.data.schools)
                    ? response.data.schools
                    : []
            )
        )
    }, [page, limit, sortColumn, sortDirection])

    const loadTeachers = (page, limit, sortColumn, sortDirection) => {
        getTeachers(page, limit, sortColumn, sortDirection).then((response) => {
            setTeachers(
                Array.isArray(response.data.teachers)
                    ? response.data.teachers
                    : []
            )
            setTotal(response.data.total)
        })
    }

    const handleCreateTeacher = async () => {
        try {
            const response = await createTeacher({
                first_name: newTeacher.first_name,
                last_name: newTeacher.last_name,
                middle_name: newTeacher.middle_name,
                subjects: newTeacher.subjects.map((subjectId) => ({
                    id: subjectId,
                })),
                schoolId: newTeacher.schoolId,
            })

            if (response.status === 201) {
                loadTeachers(page, limit, sortColumn, sortDirection)
                setShowCreateTeacherForm(false)
                setNewTeacher({
                    first_name: '',
                    last_name: '',
                    middle_name: '',
                    subjects: [],
                    schoolId: '',
                })
            }
        } catch (error) {
            console.error('Error creating teacher:', error)
        }
    }

    const handleEditTeacher = (teacher) => {
        setEditTeacher({
            id: teacher.id,
            first_name: teacher.first_name,
            last_name: teacher.last_name,
            middle_name: teacher.middle_name,
            subjects: teacher.subjects.map((subject) => subject.id),
            schoolId: teacher.schoolId,
        })
        setSelectedSubjects(teacher.subjects.map((subject) => subject.id))
        setShowEditTeacherForm(true)
    }

    const handleUpdateTeacher = async () => {
        try {
            const updatedTeacher = {
                id: editTeacher.id,
                first_name: editTeacher.first_name,
                last_name: editTeacher.last_name,
                middle_name: editTeacher.middle_name,
                subjects: editTeacher.subjects.map((subjectId) => ({
                    id: subjectId,
                })),
                schoolId: editTeacher.schoolId,
            }
            await updateTeacher(editTeacher.id, updatedTeacher)
            loadTeachers(page, limit, sortColumn, sortDirection)
            setShowEditTeacherForm(false)
            setEditTeacher({
                id: '',
                first_name: '',
                last_name: '',
                middle_name: '',
                subjects: [],
                schoolId: '',
            })
        } catch (error) {
            console.error('Error updating teacher:', error)
        }
    }

    const handleSubjectDialogOpen = (forEdit = false) => {
        setSelectedSubjects(
            forEdit ? editTeacher.subjects : newTeacher.subjects
        )
        setShowSubjectDialog(true)
    }

    const handleSubjectDialogClose = () => {
        setShowSubjectDialog(false)
    }

    const handleSubjectToggle = (subjectId) => {
        setSelectedSubjects((prevSelectedSubjects) =>
            prevSelectedSubjects.includes(subjectId)
                ? prevSelectedSubjects.filter((id) => id !== subjectId)
                : [...prevSelectedSubjects, subjectId]
        )
    }

    const handleSubjectDialogConfirm = () => {
        if (showEditTeacherForm) {
            setEditTeacher((prevEditTeacher) => ({
                ...prevEditTeacher,
                subjects: selectedSubjects,
            }))
        } else {
            setNewTeacher((prevNewTeacher) => ({
                ...prevNewTeacher,
                subjects: selectedSubjects,
            }))
        }
        setShowSubjectDialog(false)
    }

    const handleDeleteTeacher = (teacherId) => {
        setSelectedTeacherId(teacherId)
        setConfirmOpen(true)
    }

    const confirmDeleteTeacher = async () => {
        try {
            await deleteTeacher(selectedTeacherId)
            loadTeachers(page, limit, sortColumn, sortDirection)
            setConfirmOpen(false)
            setSelectedTeacherId(null)
        } catch (error) {
            console.error('Error deleting teacher:', error)
        }
    }

    const handlePageChange = (event, value) => {
        setPage(value)
    }

    const validateName = (name) => {
        const regex = /^[^\d]*$/
        return regex.test(name)
    }

    const handleInputChange = (e, field) => {
        const { value } = e.target
        if (validateName(value)) {
            setNewTeacher({ ...newTeacher, [field]: value })
        }
    }

    const handleEditInputChange = (e, field) => {
        const { value } = e.target
        if (validateName(value)) {
            setEditTeacher({ ...editTeacher, [field]: value })
        }
    }

    const handleSortRequest = (column) => {
        const isAsc = sortColumn === column && sortDirection === 'asc'
        setSortDirection(isAsc ? 'desc' : 'asc')
        setSortColumn(column)
    }

    return (
        <Box p={3}>
            <Typography variant="h4" gutterBottom>
                Teachers
            </Typography>
            <Button
                variant="contained"
                color="primary"
                onClick={() => setShowCreateTeacherForm(true)}
                sx={{ mb: 2 }}
            >
                Add Teacher
            </Button>
            <TableContainer component={Paper}>
                <Table>
                    <TableHead>
                        <TableRow>
                            <TableCell
                                sortDirection={
                                    sortColumn === 'id' ? sortDirection : false
                                }
                            >
                                <TableSortLabel
                                    active={sortColumn === 'id'}
                                    direction={
                                        sortColumn === 'id'
                                            ? sortDirection
                                            : 'asc'
                                    }
                                    onClick={() => handleSortRequest('id')}
                                >
                                    ID
                                </TableSortLabel>
                            </TableCell>
                            <TableCell
                                sortDirection={
                                    sortColumn === 'first_name'
                                        ? sortDirection
                                        : false
                                }
                            >
                                <TableSortLabel
                                    active={sortColumn === 'first_name'}
                                    direction={
                                        sortColumn === 'first_name'
                                            ? sortDirection
                                            : 'asc'
                                    }
                                    onClick={() =>
                                        handleSortRequest('first_name')
                                    }
                                >
                                    First Name
                                </TableSortLabel>
                            </TableCell>
                            <TableCell
                                sortDirection={
                                    sortColumn === 'last_name'
                                        ? sortDirection
                                        : false
                                }
                            >
                                <TableSortLabel
                                    active={sortColumn === 'last_name'}
                                    direction={
                                        sortColumn === 'last_name'
                                            ? sortDirection
                                            : 'asc'
                                    }
                                    onClick={() =>
                                        handleSortRequest('last_name')
                                    }
                                >
                                    Last Name
                                </TableSortLabel>
                            </TableCell>
                            <TableCell>Middle Name</TableCell>
                            <TableCell>Subjects</TableCell>
                            <TableCell>School</TableCell>
                            <TableCell>Actions</TableCell>
                        </TableRow>
                    </TableHead>
                    <TableBody>
                        {teachers.map((teacher) => (
                            <TableRow key={teacher.id}>
                                <TableCell>{teacher.id}</TableCell>
                                <TableCell>{teacher.first_name}</TableCell>
                                <TableCell>{teacher.last_name}</TableCell>
                                <TableCell>{teacher.middle_name}</TableCell>
                                <TableCell>
                                    {teacher.subjects
                                        .map((subject) => subject.name)
                                        .join(', ')}
                                </TableCell>
                                <TableCell>
                                    {teacher.school
                                        ? teacher.school.name
                                        : 'N/A'}
                                </TableCell>
                                <TableCell>
                                    <Button
                                        variant="contained"
                                        color="primary"
                                        onClick={() =>
                                            handleEditTeacher(teacher)
                                        }
                                        sx={{ mr: 1 }}
                                    >
                                        Edit
                                    </Button>
                                    <Button
                                        variant="contained"
                                        color="secondary"
                                        onClick={() =>
                                            handleDeleteTeacher(teacher.id)
                                        }
                                    >
                                        Delete
                                    </Button>
                                </TableCell>
                            </TableRow>
                        ))}
                    </TableBody>
                </Table>
                <PaginationComponent
                    page={page}
                    count={total}
                    rowsPerPage={limit}
                    onPageChange={handlePageChange}
                />
            </TableContainer>

            <Dialog
                open={showCreateTeacherForm}
                onClose={() => setShowCreateTeacherForm(false)}
            >
                <DialogTitle>Add Teacher</DialogTitle>
                <DialogContent>
                    <TextField
                        margin="dense"
                        label="First Name"
                        fullWidth
                        value={newTeacher.first_name}
                        onChange={(e) => handleInputChange(e, 'first_name')}
                    />
                    <TextField
                        margin="dense"
                        label="Last Name"
                        fullWidth
                        value={newTeacher.last_name}
                        onChange={(e) => handleInputChange(e, 'last_name')}
                    />
                    <TextField
                        margin="dense"
                        label="Middle Name"
                        fullWidth
                        value={newTeacher.middle_name}
                        onChange={(e) => handleInputChange(e, 'middle_name')}
                    />
                    <FormControl fullWidth margin="dense">
                        <InputLabel>School</InputLabel>
                        <Select
                            value={newTeacher.schoolId}
                            onChange={(e) =>
                                setNewTeacher({
                                    ...newTeacher,
                                    schoolId: e.target.value,
                                })
                            }
                        >
                            {schools.map((school) => (
                                <MenuItem key={school.id} value={school.id}>
                                    {school.name}
                                </MenuItem>
                            ))}
                        </Select>
                    </FormControl>
                    <Button onClick={() => handleSubjectDialogOpen()}>
                        Select Subjects
                    </Button>
                    <List>
                        {newTeacher.subjects.map((subjectId) => {
                            const subject = subjects.find(
                                (s) => s.id === subjectId
                            )
                            return subject ? (
                                <ListItem key={subject.id}>
                                    {subject.name}
                                </ListItem>
                            ) : null
                        })}
                    </List>
                </DialogContent>
                <DialogActions>
                    <Button
                        onClick={() => setShowCreateTeacherForm(false)}
                        color="secondary"
                    >
                        Cancel
                    </Button>
                    <Button onClick={handleCreateTeacher} color="primary">
                        Add
                    </Button>
                </DialogActions>
            </Dialog>

            <Dialog
                open={showEditTeacherForm}
                onClose={() => setShowEditTeacherForm(false)}
            >
                <DialogTitle>Edit Teacher</DialogTitle>
                <DialogContent>
                    <TextField
                        margin="dense"
                        label="First Name"
                        fullWidth
                        value={editTeacher.first_name}
                        onChange={(e) => handleEditInputChange(e, 'first_name')}
                    />
                    <TextField
                        margin="dense"
                        label="Last Name"
                        fullWidth
                        value={editTeacher.last_name}
                        onChange={(e) => handleEditInputChange(e, 'last_name')}
                    />
                    <TextField
                        margin="dense"
                        label="Middle Name"
                        fullWidth
                        value={editTeacher.middle_name}
                        onChange={(e) =>
                            handleEditInputChange(e, 'middle_name')
                        }
                    />
                    <FormControl fullWidth margin="dense">
                        <InputLabel>School</InputLabel>
                        <Select
                            value={editTeacher.schoolId}
                            onChange={(e) =>
                                setEditTeacher({
                                    ...editTeacher,
                                    schoolId: e.target.value,
                                })
                            }
                        >
                            {schools.map((school) => (
                                <MenuItem key={school.id} value={school.id}>
                                    {school.name}
                                </MenuItem>
                            ))}
                        </Select>
                    </FormControl>
                    <Button onClick={() => handleSubjectDialogOpen(true)}>
                        Select Subjects
                    </Button>
                    <List>
                        {editTeacher.subjects.map((subjectId) => {
                            const subject = subjects.find(
                                (s) => s.id === subjectId
                            )
                            return subject ? (
                                <ListItem key={subject.id}>
                                    {subject.name}
                                </ListItem>
                            ) : null
                        })}
                    </List>
                </DialogContent>
                <DialogActions>
                    <Button
                        onClick={() => setShowEditTeacherForm(false)}
                        color="secondary"
                    >
                        Cancel
                    </Button>
                    <Button onClick={handleUpdateTeacher} color="primary">
                        Save
                    </Button>
                </DialogActions>
            </Dialog>

            <Dialog open={showSubjectDialog} onClose={handleSubjectDialogClose}>
                <DialogTitle>Select Subjects</DialogTitle>
                <DialogContent>
                    <List>
                        {subjects.map((subject) => (
                            <ListItem
                                key={subject.id}
                                button
                                onClick={() => handleSubjectToggle(subject.id)}
                            >
                                <Checkbox
                                    checked={selectedSubjects.includes(
                                        subject.id
                                    )}
                                />
                                <ListItemText primary={subject.name} />
                            </ListItem>
                        ))}
                    </List>
                </DialogContent>
                <DialogActions>
                    <Button
                        onClick={handleSubjectDialogClose}
                        color="secondary"
                    >
                        Cancel
                    </Button>
                    <Button
                        onClick={handleSubjectDialogConfirm}
                        color="primary"
                    >
                        Confirm
                    </Button>
                </DialogActions>
            </Dialog>

            <Dialog open={confirmOpen} onClose={() => setConfirmOpen(false)}>
                <DialogTitle>Confirm Deletion</DialogTitle>
                <DialogContent>
                    Are you sure you want to delete this teacher?
                </DialogContent>
                <DialogActions>
                    <Button
                        onClick={() => setConfirmOpen(false)}
                        color="secondary"
                    >
                        Cancel
                    </Button>
                    <Button onClick={confirmDeleteTeacher} color="primary">
                        Confirm
                    </Button>
                </DialogActions>
            </Dialog>
        </Box>
    )
}

export default TeacherTable
